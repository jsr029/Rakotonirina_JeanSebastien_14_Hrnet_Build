{"version":3,"file":"static/js/720.105c9ca9.chunk.js","mappings":"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","sources":["components/SerachBar/index.jsx","components/TableEmployees/index.jsx","pages/ViewCurrentEmployees.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\n\r\n/** gets the callback by props just like function */\r\nfunction SearchBar({ callback }) {\r\n    const [innerValue, setInnerValue] = useState('')\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        callback(innerValue)\r\n    }\r\n    return (\r\n        <form className='searchBar' onSubmit={handleSubmit}>\r\n            <input\r\n             placeholder=\"Type word or not and press enter...\"\r\n                type=\"text\"\r\n                className='searchBarInput'\r\n                value={innerValue}\r\n                onChange={(e) => setInnerValue(e.target.value)}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import React, { useState } from \"react\";\nimport DataTable from 'react-data-table-component';\n//import EmployeeTable from \"../EmployeeTable\";\nimport moment from \"moment-jalaali\";\nimport SearchBar from \"../SerachBar\";\nimport { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nfunction TableEmployees() {\n    const employeesStore = useSelector(state => state.employeesReducer).data\n    const filterEmployees = searchValue => {\n        if (searchValue === '') {\n            return employeesStore\n        }\n        return employeesStore.filter(employee => {\n            let result = false\n            result = employee.firstname.toLowerCase().includes(searchValue.toLowerCase()) ||\n                employee.lastname.toLowerCase().includes(searchValue.toLowerCase()) ||\n                employee.street.toLowerCase().includes(searchValue.toLowerCase()) ||\n                employee.city.toLowerCase().includes(searchValue.toLowerCase()) ||\n                employee.Departement.value.toLowerCase().includes(searchValue.toLowerCase()) ||\n                employee.State.value.toLowerCase().includes(searchValue.toLowerCase()) ||\n                employee.dateofbirth.includes(searchValue) ||\n                employee.zipcode.toLowerCase().includes(searchValue.toLowerCase())\n            return result\n        })\n        // employee.firstname.toLowerCase().includes(searchValue.toLowerCase()))\n    }\n    /* \n      - Columns is a simple array right now, but it will contain some logic later on. It is recommended by react-table to memoize the columns data\n      - Here in this example, we have grouped our columns into two names. react-table is flexible enough to create grouped table names\n    */\n    const columns = [\n        {\n            id: 1,\n            name: \"Firstname\",\n            selector: row => row.firstname,\n            sortable: true,\n            reorder: true\n        },\n        {\n            id: 2,\n            name: \"Lastname\",\n            selector: row => row.lastname,\n            sortable: true,\n            reorder: true\n        },\n        {\n            id: 3,\n            name: \"Start Date\",\n            selector: row => row.startdate,\n            format: (row) => moment(row.startdate).format('DD/MM/YYYY'),\n            sortable: true,\n            reorder: true\n        },\n        {\n            id: 4,\n            name: \"Department\",\n            selector: row => row.Departement.value,\n            sortable: true,\n            reorder: true\n        },\n        {\n            id: 5,\n            name: \"Date of Birth\",\n            selector: row => row.dateofbirth,\n            format: (row) => moment(row.dateofbirth).format('DD/MM/YYYY'),\n            sortable: true,\n            reorder: true\n        },\n        {\n            id: 6,\n            name: \"Street\",\n            selector: row => row.street,\n            sortable: true,\n            reorder: true\n        },\n        {\n            id: 7,\n            name: \"City\",\n            selector: row => row.city,\n            sortable: true,\n            reorder: true\n        },\n        {\n            id: 8,\n            name: \"State\",\n            selector: row => row.State.value,\n            sortable: true,\n            reorder: true\n        },\n        {\n            id: 9,\n            name: \"Zip Code\",\n            selector: row => row.zipcode,\n            sortable: true,\n            right: true,\n            reorder: true\n        }\n    ]\n    const [employees, setEmployees] = useState(employeesStore)\n    const [searchValue, setSearchValue] = useState('')\n\n    useEffect(() => {\n        const filteredEmployees = filterEmployees(searchValue)\n        setEmployees(filteredEmployees)\n    }, [searchValue])\n    const BootyPagination = ({\n        rowsPerPage,\n        rowCount,\n        onChangePage,\n        onChangeRowsPerPage, // available but not used here\n        currentPage\n    }) => {\n        const handleBackButtonClick = () => {\n            onChangePage(currentPage - 1);\n        };\n\n        const handleNextButtonClick = () => {\n            onChangePage(currentPage + 1);\n        };\n\n        const handlePageNumber = (e) => {\n            onChangePage(Number(e.target.value));\n        };\n        function getNumberOfPages(rowCount, rowsPerPage) {\n            return Math.ceil(rowCount / rowsPerPage);\n        }\n\n        function toPages(pages) {\n            const results = [];\n\n            for (let i = 1; i < pages; i++) {\n                results.push(i);\n            }\n\n            return results;\n        }\n        const pages = getNumberOfPages(rowCount, rowsPerPage);\n        const pageItems = toPages(pages);\n        const nextDisabled = currentPage === pageItems.length;\n        const previosDisabled = currentPage === 1;\n\n        return (\n            <nav>\n                <ul className=\"pagination\">\n                    <li className=\"page-item\">\n                        <button\n                            className=\"page-link\"\n                            onClick={handleBackButtonClick}\n                            disabled={previosDisabled}\n                            aria-disabled={previosDisabled}\n                            aria-label=\"previous page\"\n                        >\n                            Previous\n                        </button>\n                    </li>\n                    {pageItems.map((page) => {\n                        const className =\n                            page === currentPage ? \"page-item active\" : \"page-item\";\n\n                        return (\n                            <li key={page} className={className}>\n                                <button\n                                    className=\"page-link\"\n                                    onClick={handlePageNumber}\n                                    value={page}\n                                >\n                                    {page}\n                                </button>\n                            </li>\n                        );\n                    })}\n                    <li className=\"page-item\">\n                        <button\n                            className=\"page-link\"\n                            onClick={handleNextButtonClick}\n                            disabled={nextDisabled}\n                            aria-disabled={nextDisabled}\n                            aria-label=\"next page\"\n                        >\n                            Next\n                        </button>\n                    </li>\n                </ul>\n            </nav>\n        );\n    };\n    return (\n        <>\n            <h2>Search</h2><SearchBar callback={(searchValue) => setSearchValue(searchValue)} />\n            <div className=\"App\">\n                <DataTable\n                    columns={columns}\n                    data={employees}\n                    pagination                \n                    paginationServer\n                   // paginationTotalRows={totalRows}\n                  //paginationComponent={BootyPagination}\n                    subHeader\n                    defaultSortFieldId={1}\n                    rowsPerPage={10}\n                    currentPage={1}\n                />\n            </div>\n        </>\n    );\n}\n\nexport default TableEmployees","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport TableEmployees from '../components/TableEmployees'\n\nfunction ViewCurrentEmployees() {\n  return (\n    <>\n      <div className='employees'>\n        <h1>Current Employees</h1>\n        <TableEmployees />\n      </div>\n      <Link to=\"/\">Home</Link>\n    </>\n  )\n}\n\nexport default ViewCurrentEmployees"],"names":["callback","useState","innerValue","setInnerValue","className","onSubmit","e","preventDefault","placeholder","type","value","onChange","target","employeesStore","useSelector","state","employeesReducer","data","columns","id","name","selector","row","firstname","sortable","reorder","lastname","startdate","format","moment","Departement","dateofbirth","street","city","State","zipcode","right","employees","setEmployees","searchValue","setSearchValue","useEffect","filteredEmployees","filter","employee","toLowerCase","includes","filterEmployees","pagination","paginationServer","subHeader","defaultSortFieldId","rowsPerPage","currentPage","to"],"sourceRoot":""}